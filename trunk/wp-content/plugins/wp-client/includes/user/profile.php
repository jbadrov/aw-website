<?php
global $wpdb, $current_user; $data = array(); $data['user_info'] = get_currentuserinfo(); extract($_REQUEST); $message = ''; $message_class = 'red'; if ( isset( $btnAdd ) && current_user_can( 'wpc_modify_profile' ) ) { if ( empty( $contact_name ) ) $message .= __('A Contact Name is required.<br/>', WPC_CLIENT_TEXT_DOMAIN); if ( empty( $contact_email ) ) $message .= __('A email is required.<br/>', WPC_CLIENT_TEXT_DOMAIN); $contact_email = apply_filters( 'pre_user_email', isset( $contact_email ) ? $contact_email : '' ); if ( email_exists( $contact_email ) ) { if ( $ID != get_user_by( 'email', $contact_email )->ID ) { $message .= __( 'Email address already in use.<br/>', WPC_CLIENT_TEXT_DOMAIN ); } } if ( isset( $update_password ) && ( empty( $contact_password ) || empty( $contact_password2 ) ) ) { if ( empty( $contact_password ) ) $message .= __("Sorry, password is required.<br/>", WPC_CLIENT_TEXT_DOMAIN); elseif ( empty( $contact_password2 ) ) $message .= __("Sorry, confirm password is required.<br/>", WPC_CLIENT_TEXT_DOMAIN); elseif ( $contact_password != $contact_password2 ) $message .= __("Sorry, Passwords are not matched! .<br/>", WPC_CLIENT_TEXT_DOMAIN); } $all_custom_fields = $this->get_custom_fields( 'user_edit', $ID ); if( isset( $custom_fields ) && count( $custom_fields ) > count( $all_custom_fields ) ) { exit; } if( isset( $custom_fields ) && is_array( $custom_fields ) && is_array( $all_custom_fields ) ) { foreach( $custom_fields as $key=>$value ) { if( !key_exists( $key, $all_custom_fields ) ) { exit; } } foreach( $all_custom_fields as $all_key=>$all_value ) { if ( ( 'checkbox' == $all_value['type'] || 'radio' == $all_value['type'] || 'multiselectbox' == $all_value['type'] ) && !key_exists( $all_key, $custom_fields ) ) { $custom_fields[$all_key] = ''; } foreach( $custom_fields as $key=>$value ) { if( $key == $all_key && ( isset( $all_value['required'] ) && '1' == $all_value['required'] ) && '' == $value ) { $message .= __( $all_custom_fields[$all_key]['title'] . " is required! Please fill in the field and try again!<br/>", WPC_CLIENT_TEXT_DOMAIN); } } } } if( '' == $message ) { $message = __( "The changes have been successfully saved.<br/>", WPC_CLIENT_TEXT_DOMAIN); $message_class = 'green'; } else { $message_class = 'red'; } } $client = get_userdata( $current_user->ID ); $business_name = get_user_meta( $current_user->ID, 'wpc_cl_business_name', true ); $contact_name = $client->display_name; $wp_contact_phone = get_user_meta( $current_user->ID, $wpdb->prefix . 'contact_phone', true ); $data['modify_profile'] = false; if ( current_user_can( 'wpc_modify_profile' ) ) { $data['modify_profile'] = true; $data['reset_password'] = false; if ( current_user_can( 'wpc_reset_password' ) ) { $data['reset_password'] = true; $data['label_contact_password'] = __( 'New Password', WPC_CLIENT_TEXT_DOMAIN ) ; $data['contact_password'] = ( $message ) ? esc_html( $_REQUEST['contact_password'] ) : ''; $data['label_contact_password2'] = __( 'Confirm New Password', WPC_CLIENT_TEXT_DOMAIN ) ; $data['contact_password2'] = ( $message ) ? esc_html( $_REQUEST['contact_password2'] ) : ''; $data['label_strength_indicator'] = __( 'Strength indicator', WPC_CLIENT_TEXT_DOMAIN ) ; $data['label_indicator_hint'] = __( '<strong>Hint:</strong> The password should be at least seven characters long. To make it stronger, use upper and lower case letters, numbers and symbols like <strong>! " ? $ % ^ & )</strong>.', WPC_CLIENT_TEXT_DOMAIN ) ; } $data['text_submit'] = __( 'Update', WPC_CLIENT_TEXT_DOMAIN ) ; $data['submit'] = wp_nonce_field( 'verify_edit_user', 'edit_nonce_field', true, false ); } $custom_fields = $this->get_custom_fields( 'user_edit', $current_user->ID ); $custom_field = array(); if ( is_array( $custom_fields ) && 0 < count( $custom_fields ) ) { $this->add_custom_fields_scripts(); foreach( $custom_fields as $key => $value ) { if ( 'hidden' == $value['type'] ) { $custom_field[] = $value['field']; } elseif ( 'checkbox' == $value['type'] || 'radio' == $value['type'] ) { $custom_field[] = '<p>'; $custom_field[] .= ( !empty( $value['label'] ) ) ? $value['label'] : ''; if ( !empty( $value['field'] ) ) foreach ( $value['field'] as $field ) { $custom_field[] .= $field . '<label class="title">&nbsp;</label>'; } $custom_field[] .= ( !empty( $value['description'] ) ) ? $value['description'] : ''; $custom_field[] .= '</p>'; } else { $custom_field[] = '<p>'; $custom_field[] .= ( !empty( $value['label'] ) ) ? $value['label'] : ''; $custom_field[] .= ( !empty( $value['field'] ) ) ? $value['field'] : ''; $custom_field[] .= ( !empty( $value['description'] ) ) ? $value['description']: ''; $custom_field[] .= '</p>'; } } } $data['label_business_name'] = __( 'Business Name', WPC_CLIENT_TEXT_DOMAIN ); $data['label_contact_name'] = __( 'Contact Name', WPC_CLIENT_TEXT_DOMAIN ); $data['label_contact_email'] = __( 'Email', WPC_CLIENT_TEXT_DOMAIN ); $data['label_contact_phone'] = __( 'Phone', WPC_CLIENT_TEXT_DOMAIN ); $data['label_contact_username'] = __( 'Username', WPC_CLIENT_TEXT_DOMAIN ); $data['busname_cannot_changed'] = __( 'Business Names cannot be changed.', WPC_CLIENT_TEXT_DOMAIN ); $data['username_cannot_changed'] = __( 'Username cannot be changed.', WPC_CLIENT_TEXT_DOMAIN ); $data['message_class'] = ( 'red' == $message_class ) ? 'message_red' : 'message_green'; $data['message'] = $message; $data['custom_field'] = $custom_field; $data['ID'] = $current_user->ID; $data['business_name'] = ( isset( $business_name ) ) ? $business_name : ''; $data['contact_username'] = ( isset( $client ) ) ? $client->user_login : ''; $data['contact_name'] = ( $message ) ? esc_html( $_REQUEST['contact_name'] ) : $contact_name; $data['contact_email'] = ( isset( $client ) ) ? $client->user_email : ''; $data['contact_phone'] = ( $message ) ? esc_html( $_REQUEST['contact_phone'] ) : $wp_contact_phone; $html = ''; $data['custom_html'] = apply_filters( 'wpc_client_profile_custom_html', $html ); $out2 = $this->cc_getTemplateContent( 'wpc_profile', $data, $user_id ); return do_shortcode( $out2 );